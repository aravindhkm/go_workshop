package main

import (
	"fmt"
	"sort"
)

// Find a triplet in [47, 6, 3, 8, 12, 10, 5, 13, 21]
// that will sums to k=28

// [47, 6, 3, 8, 12, 10, 5, 13, 21]
// [0,  1, 2, 3, 4,  5,  6,  7,  8]

// expect output
// [[6, 12, 10]] [3, 12, 13] [5, 10, 13]

func findTriplet(arr []int, k int) [][]int {
	n := len(arr)
	
	sort.Ints(arr)

	result := [][]int{}
	for i := 0; i < n-2; i++ {

		left := i + 1
		right := len(arr) - 1

		for left < right {
			// fmt.Println("result", i, left, right)
			// fmt.Println("val", arr[i], arr[left], arr[right])
			sumValue := arr[i] + arr[left] + arr[right]
			if sumValue == k {
				result = append(result, []int{arr[i], arr[left], arr[right]})
				break
			} else if sumValue < k {
				left++
			} else {
				right--
			}
		}
	}
	return result
}

func main() {
	fmt.Println(findTriplet([]int{47, 6, 3, 8, 12, 10, 5, 13, 21}, 28))
	fmt.Println("")
}



package main

import (
	"fmt"
	"sync"
)

func addValue(data []int, outCh chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for _, value := range data {
		outCh <- value
	}
}

func main() {
	arr := []int{2, 2, 2, 2, 2, 2}
	outCh := make(chan int)
	result := 0

	wg := &sync.WaitGroup{}

	wg.Add(2)
	go addValue(arr, outCh, wg)
	go addValue(arr, outCh, wg)

	go func() {
		wg.Wait()
		close(outCh)
	}()

	for value := range outCh {
		result += value
	}
	fmt.Println(result)
}
