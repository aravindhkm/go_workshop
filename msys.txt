
func job(worker string, jobId <-chan int, outCh chan<- string, wg *sync.WaitGroup) {
	defer wg.Done()
	for job := range jobId {
		outCh <- fmt.Sprintf("%s processed job %d", worker, job)
	}
}

func main() {
	// workers := []string{"Alice", "Bob", "John", "Mark"}
	// numberOfJobs := 49
	// jobId := make(chan int)
	// outCh := make(chan string)
	// var wg sync.WaitGroup

	// // Start workers
	// for _, w := range workers {
	// 	wg.Add(1)
	// 	go job(w, jobId, outCh, &wg)
	// }

	// // Send jobs
	// go func() {
	// 	for i := 0; i < numberOfJobs; i++ {
	// 		jobId <- i
	// 	}
	// 	close(jobId)
	// }()

	// // Close outCh after all workers are done
	// go func() {
	// 	wg.Wait()
	// 	close(outCh)
	// }()

	// // Read results
	// for result := range outCh {
	// 	fmt.Println(result)
	// }

	a := make([]int, 0)

	fmt.Println(a, a==nil)

	var b []int
	fmt.Println(b, b == nil)
}
