package main

import (
	"fmt"
	"sync"
)

func addNumber(outCh chan int, wg *sync.WaitGroup) {
	defer wg.Done()

	for i := 1; i < 15; i++ {
		outCh <- i * i
	}
}

func main() {
	outCh := make(chan int)
	wg := &sync.WaitGroup{}

	wg.Add(1)
	go addNumber(outCh, wg)

	for range 9 {
		fmt.Println(<-outCh)
	}

	wg.Wait()

}

type ServiceType struct {
	Name               string
	ServiceIpv6Address string
	Ipv6address        string
	Capabilities       []string
}

type Service struct {
	Entity string
	Data   ServiceType
}

type Output struct {
	Name               string
	ServiceIpv6Address string
	Auth               interface{}
	UserName           interface{}
	Password           interface{}
}

func loadData() []Service {
	data := []Service{
		{
			Entity: "amp",
			Data: ServiceType{
				Name:               "amp_1",
				ServiceIpv6Address: "2001:124:2441:2435:1fw2",
				Ipv6address:        "",
				Capabilities:       []string{"gnmi", "snmp"},
			},
		},
		{
			Entity: "amp",
			Data: ServiceType{
				Name:               "amp_2",
				ServiceIpv6Address: "fewfwef",
				Ipv6address:        "",
				Capabilities:       []string{"gnmi"},
			},
		},
		{
			Entity: "rpd",
			Data: ServiceType{
				Name:               "rpd_1",
				ServiceIpv6Address: "",
				Ipv6address:        "fwefewf",
				Capabilities:       []string{"gnmi", "snmp"},
			},
		},
		{
			Entity: "rpd",
			Data: ServiceType{
				Name:               "rpd_2",
				ServiceIpv6Address: "",
				Ipv6address:        "wefef",
				Capabilities:       []string{"snmp"},
			},
		},
	}

	return data
}

func main() {
	data := loadData()

	snmpDeviceList := []string{}
	gnmiDeviceList := []string{}
	finalResult := []string{}

	for _, value := range data {
		bothList := 0
		for _, capabilities := range value.Data.Capabilities {
			if capabilities == "snmp" {
				bothList++
				snmpDeviceList = append(snmpDeviceList, value.Data.Name)
			}

			if capabilities == "gnmi" {
				bothList++
				gnmiDeviceList = append(gnmiDeviceList, value.Data.Name)
			}
		}

		if bothList == 2 {
			finalResult = append(finalResult, value.Data.Name)
		}
	}

	fmt.Println("snmpDeviceList", snmpDeviceList)
	fmt.Println("gnmiDeviceList", gnmiDeviceList)
	fmt.Println("finalResult", finalResult)
}

snmp: {"name": "rpd_1", "ipv6Address": "2001:124:2441:2435:1fw4", "auth": {"user": "test", "password": "123"}}
gnmi: {"name": "amp_1", "ipv6Address": "2001:124:2441:2435:1fw2", "username": "amp", "password": "amp"}

[
  {
    "entity": "amp",
    "data": {
      "name": "amp_1",
      "serviceIpv6Address": "2001:124:2441:2435:1fw2",
      "capabilities": ["gnmi", "snmp"]
    }
  },
  {
    "entity": "amp",
    "data": {
      "name": "amp_2",
      "serviceIpv6Address": "2001:124:2441:2435:1fw3",
      "capabilities": ["gnmi"]
    }
  },
  {
    "entity": "rpd",
    "data": {
      "name": "rpd_1",
      "ipv6address": "2001:124:2441:2435:1fw4",
      "capabilities": ["gnmi", "snmp"]
    }
  },
  {
    "entity": "rpd",
    "data": {
      "name": "rpd_2",
      "ipv6address": "2001:124:2441:2435:1fw5",
      "capabilities": ["snmp"]
    }
  }
]

snmap 4,3,1
gnmi 3,2,1

snmp_devices_list: ["amp_1", "rpd_1", "rpd_2"]
gnmi_devices_list: ["amp_1", "amp_2", "rpd_1"]

gnmi_and_snmp_devices_list: ["amp_1", "rpd_1"]
